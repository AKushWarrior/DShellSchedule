#! /usr/bin/env dshell
import 'dart:async';
import 'dart:cli';
import 'dart:io';

import 'package:dshell/dshell.dart';
import 'package:dshell/src/util/pipe.dart';

/// dshell script generated by:
/// dshell create editor.dart
///
/// See
/// https://pub.dev/packages/dshell#-installing-tab-
///
/// For details on installing dshell.
///

Future<void> main() async {
  // print('one');
  // 'dart --version'.run;
  // print('two');
  // ('dart --version' | 'head').run;

  // await for each process to start
  var dart = start('dart', ['--version']);
  var head = start('head', ['-n', '5']);

  pipeTo(dart, head);

  //Future.wait([dart.])
}

void pipeTo(Future<Process> lhs, Future<Process> rhs) {
  var complete = Completer<void>();
  print('pipeTo called');
  // wait for the lhs process to
  // start and then start piping its
  // output to the rhs process.
  lhs.then((lhsProcess) {
    rhs.then<void>((rhsProcess) {
      // write stdout from lhs to stdin of rhs
      lhsProcess.stdout.listen((datum) {
        print('listen');
        rhsProcess.stdin.add(datum);
        print('listen written');
      }, onDone: () {
        print('done');
        complete.complete();
      }, // stdoutCompleter.complete(true),
          onError: (Object e, StackTrace s) =>
              print('onError $e'), // stdoutCompleter.completeError(e),
          cancelOnError: true);

      // write stderr from lhs to stdin of rhs.
      lhsProcess.stderr.listen((datum) {
        print('listen: stderr');
        rhsProcess.stdin.add(datum);
        print('listen: stderr written');
      }, onDone: () {
        print('done err');
        if (!complete.isCompleted) complete.complete();
      }, // stdoutCompleter.complete(true),
          onError: (Object e, StackTrace s) =>
              print('onError $e'), // stdoutCompleter.completeError(e),
          cancelOnError: true);

      lhsProcess.exitCode.then((exitCode) {
        print('lhs exitCode=$exitCode');
      });

      rhsProcess.exitCode.then((exitCode) {
        print('rhs exitCode=$exitCode');
      });
    });
  });

  waitFor(complete.future);
}

Future<Process> start(String command, List<String> args) async {
  var process = Process.start(
    command,
    args,
  );
  return process;
}
